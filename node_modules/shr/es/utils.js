var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

export function isFormData(val) {
  return typeof FormData !== 'undefined' && val instanceof FormData;
}

export function isObject(val) {
  return val !== null && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object';
}

export function reason(message, response) {
  var error = new TypeError(message);
  if (response) {
    error.response = response;
  }
  return error;
}

export function append() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var key = arguments[1];
  var value = arguments[2];

  if (isFormData(data)) {
    data.append(key, value);
  } else if (isObject(data)) {
    data = Object.assign({}, data, _defineProperty({}, key, value));
  } else {
    data += '&' + encodeURIComponent(key) + '=' + encodeURIComponent(value);
  }
  return data;
}