'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.append = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.create = create;

var _qs = require('qs');

var _qs2 = _interopRequireDefault(_qs);

var _utils = require('./utils');

var _defaults = require('./defaults');

var _defaults2 = _interopRequireDefault(_defaults);

var _xhr = require('./xhr');

var _xhr2 = _interopRequireDefault(_xhr);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function transformData(data, options) {
  if (!data) {
    return data;
  }
  if ((0, _utils.isFormData)(data)) {
    return data;
  }
  if ((0, _utils.isObject)(data)) {
    return _qs2.default.stringify(data);
  }
  return data;
}

function _request(url) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var adapter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _xhr2.default;
  var _options = options,
      _options$baseURL = _options.baseURL,
      baseURL = _options$baseURL === undefined ? '' : _options$baseURL;

  url = baseURL + url;
  var headers = Object.assign({}, _defaults2.default.headers, options.headers);
  options = Object.assign({}, _defaults2.default, options, { headers: headers });
  options.method = options.method.toUpperCase();
  if (options.transformRequest) {
    if (options.method === 'GET') {
      options.params = options.transformRequest(options.params, options);
    } else {
      options.data = options.transformRequest(options.data, options);
    }
  }
  options.data = transformData(options.data, options);
  if (!options.data || (0, _utils.isFormData)(options.data)) {
    delete options.headers['Content-Type']; // Let the browser set it
  }
  if (options.params) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + _qs2.default.stringify(options.params);
  }

  return adapter(url, options).then(function (response) {
    if (options.isValid(response)) {
      if (options.transformResponse) {
        response.data = options.transformResponse(response.data, options);
      }
      return response;
    } else {
      throw (0, _utils.reason)('Invalid response', response);
    }
  });
}

var Client = function () {
  function Client(options) {
    var _this = this;

    _classCallCheck(this, Client);

    this.options = options;
    this.adapter = _xhr2.default;['put', 'patch', 'delete'].forEach(function (method) {
      _this[method] = function (url, data) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        data = (0, _utils.append)(data, '_method', method);
        return _this.post(url, data, options);
      };
    });
  }

  _createClass(Client, [{
    key: 'request',
    value: function request(url) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      options = Object.assign({}, this.options, options);
      return _request(url, options, this.adapter);
    }
  }, {
    key: 'get',
    value: function get(url, params) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      options.method = 'get';
      options.params = params;
      return this.request(url, options);
    }
  }, {
    key: 'post',
    value: function post(url, data) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      options.method = 'post';
      options.data = data;
      return this.request(url, options);
    }
  }, {
    key: 'setAdapter',
    value: function setAdapter(adapter) {
      this.adapter = adapter;
      return this;
    }
  }]);

  return Client;
}();

function create() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return new Client(options);
}

exports.default = create();
exports.append = _utils.append;